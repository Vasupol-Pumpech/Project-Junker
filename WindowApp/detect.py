import requests
import numpy as np
import cv2
from ultralytics import YOLO
import mqtt_config
from datetime import datetime
import threading
import os
import sys
from sql import save_garbage_data, get_bin_level, get_bin_Alert, get_bin_location
from Telegram import sendmessageto
from GarbageDetails import GarbageDetailsWindow
from PyQt5.QtCore import QCoreApplication

# ‡∏´‡∏≤ path ‡∏ó‡∏µ‡πà .exe ‡∏´‡∏£‡∏∑‡∏≠ .py ‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà
if getattr(sys, 'frozen', False):  # ‡∏ñ‡πâ‡∏≤‡∏£‡∏±‡∏ô‡∏à‡∏≤‡∏Å .exe
    script_dir = os.path.dirname(sys.executable)
else:  # ‡∏ñ‡πâ‡∏≤‡∏£‡∏±‡∏ô‡∏à‡∏≤‡∏Å .py
    script_dir = os.path.dirname(os.path.abspath(__file__))

model_path = os.path.join(script_dir, "junker.pt")  # ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö .exe

if os.path.exists(model_path):
    model = YOLO(model_path)
    print(f"‚úÖ Model loaded from: {model_path}")
else:
    print(f"‚ùå Warning: {model_path} not found! Please put the model in the same folder as the exe.")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ã‡∏ü‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
def save_detected_image(img, best_class):
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")  # ‡∏™‡∏£‡πâ‡∏≤‡∏á timestamp ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
    file_name = f"img_detect/{best_class}_{timestamp}.jpg"  # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if not os.path.exists("img_detect"):
        os.makedirs("img_detect")

    detected_img = img.plot()  # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö (‡∏°‡∏µ‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö)
    cv2.imwrite(file_name, detected_img)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå img_detect
    print(f"Saved detected image as {file_name}")  # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å

    return file_name  # ‡∏Ñ‡∏∑‡∏ô‡∏û‡∏≤‡∏ò‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
def request_image_and_detect(machine_id, url):
    print(f"Requesting image from ESP32 (Machine ID: {machine_id}) at {url}...")
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            nparr = np.frombuffer(response.content, np.uint8)
            img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)

            if img is not None:
                
                print("‚úÖ Image successfully decoded. Running YOLO model...")
                print(f"üîç Model Path: {model_path}")  # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏£‡∏±‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô
                print(f"üîç Model Object: {model}")  # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

                results = model(img)
                print(f"üîç YOLO Detection Results: {results}")
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if results and len(results[0].boxes) > 0:
                    best_box = results[0].boxes[0]
                    print(f"üîç Best Box: {best_box}")  # Debugging
                    print(f"üîç All Names in YOLO: {results[0].names}")  # Debugging
                    
                    best_class = results[0].names.get(int(best_box.cls), "unknown")

                    print(f"‚úÖ Detected Class: {best_class}")  # Debugging
                    new_class = ""

                    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    if best_class == "bottle":
                        current_amount = get_bin_level(machine_id, column="bottle_amount")
                        new_class ="‡∏Ç‡∏ß‡∏î"
                    elif best_class == "can":
                        current_amount = get_bin_level(machine_id, column="can_amount")
                        new_class ="‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á"
                    elif best_class == "papercup":
                        current_amount = get_bin_level(machine_id, column="papercup_amount")
                        new_class ="‡πÅ‡∏Å‡πâ‡∏ß‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©"
                    else:  # non_object
                        current_amount = get_bin_level(machine_id, column="others_amount")
                        
                    detected_topic = f"junker/{machine_id}/detected"
                    mqtt_config.client.publish(detected_topic, best_class, qos=1)
                    print(f"Published '{best_class}' to topic {detected_topic}")  

                    location = get_bin_location(machine_id)
                    bin_data = get_bin_Alert(machine_id)

                    if bin_data:
                        bin_level = bin_data.get('bin_level')
                        bin_notify = bin_data.get('bin_notify')  
                    
                    if current_amount and current_amount.get(f"{best_class}_amount", 0) >= bin_notify and current_amount and current_amount.get(f"{best_class}_amount", 0) < bin_level :
                        sendmessageto("user",f"""üìå ‡∏ñ‡∏±‡∏á‡∏ó‡∏µ‡πà {machine_id} ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á {location}                            
üö® ‡∏ä‡πà‡∏≠‡∏á {new_class} ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß""")
                        sendmessageto("admin",f"""üìå ‡∏ñ‡∏±‡∏á‡∏ó‡∏µ‡πà {machine_id} ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á {location}                            
üö® ‡∏ä‡πà‡∏≠‡∏á {new_class} ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß""")
                    elif current_amount and current_amount.get(f"{best_class}_amount", 0) >= bin_level:
                        print(f"Skipping save for {best_class} as it exceeds max_level ({bin_level})")
                        sendmessageto("user",f"""üìå ‡∏ñ‡∏±‡∏á‡∏ó‡∏µ‡πà {machine_id} ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á {location}
üö® ‡∏ä‡πà‡∏≠‡∏á {new_class} ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß""")
                        sendmessageto("admin",f"""üìå ‡∏ñ‡∏±‡∏á‡∏ó‡∏µ‡πà {machine_id} ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á {location}
üö® ‡∏ä‡πà‡∏≠‡∏á {new_class} ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß""")
                        # return

                    # ‡πÄ‡∏ã‡∏ü‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏ò‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
                    file_path = save_detected_image(results[0], best_class)

                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    save_garbage_data(machine_id, best_class, file_path)
                    print("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏¢‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI")

                    app = QCoreApplication.instance()
                    if app:
                        for widget in app.topLevelWidgets():
                            if isinstance(widget, GarbageDetailsWindow):
                                widget.garbage_updated.emit()  # ‡πÉ‡∏ä‡πâ signal ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
                                print("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")


                else:
                    # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° 'non_object'
                    detected_topic = f"junker/{machine_id}/detected"
                    mqtt_config.client.publish(detected_topic, "non_object", qos=1)
                    print(f"Published 'non_object' to topic {detected_topic}")

                    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö non_object
                    current_amount = get_bin_level(machine_id, column="others_amount")

                    location = get_bin_location(machine_id)
                    bin_data = get_bin_Alert(machine_id)
                    if bin_data:
                        bin_level = bin_data.get('bin_level')
                        bin_notify = bin_data.get('bin_notify')  

                    if current_amount and current_amount.get("others_amount", 0) >= bin_notify and current_amount and current_amount.get("others_amount", 0) < bin_level :
                        sendmessageto("user",f"""üìå ‡∏ñ‡∏±‡∏á‡∏ó‡∏µ‡πà {machine_id} ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á {location}
üö® ‡∏ä‡πà‡∏≠‡∏á ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß""")   
                        sendmessageto("admin",f"""üìå ‡∏ñ‡∏±‡∏á‡∏ó‡∏µ‡πà {machine_id} ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á {location}
üö® ‡∏ä‡πà‡∏≠‡∏á ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß""")   
                    elif current_amount and current_amount.get("others_amount", 0) >= bin_level:
                        print(f"Skipping save for non_object as it exceeds max_level ({bin_level})")
                        sendmessageto("user",f"""üìå ‡∏ñ‡∏±‡∏á‡∏ó‡∏µ‡πà {machine_id} ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á {location}
üö® ‡∏ä‡πà‡∏≠‡∏á ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß""")
                        sendmessageto("admin",f"""üìå ‡∏ñ‡∏±‡∏á‡∏ó‡∏µ‡πà {machine_id} ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á {location}
üö® ‡∏ä‡πà‡∏≠‡∏á ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß""")
                        # return
                    

                    # ‡πÄ‡∏ã‡∏ü‡∏†‡∏≤‡∏û‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
                    file_path = save_detected_image(results[0], "non_object")

                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    save_garbage_data(machine_id, "non_object", file_path)
                    print("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏¢‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI")
    
                    app = QCoreApplication.instance()
                    if app:
                        for widget in app.topLevelWidgets():
                            if isinstance(widget, GarbageDetailsWindow):
                                widget.garbage_updated.emit()  # ‡πÉ‡∏ä‡πâ signal ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
                                print("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                    

            else:
                print("Failed to decode the image")
        else:
            print(f"Failed to retrieve image. Status code: {response.status_code}")
    except Exception as e:
        print(f"Error occurred while requesting image: {e}")
